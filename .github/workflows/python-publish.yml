# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload PyHTools Python Package to PyPi

on:
  release:
    types: [published]

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  deploy:
    runs-on: ubuntu-latest

    # steps:
    #   - name: Repo Checkout
    #     uses: actions/checkout@v4

    #   - name: Set up Python
    #     uses: actions/setup-python@v5
    #     with:
    #       python-version: "3.12.x"

    #   - name: Install and configure Poetry
    #     uses: snok/install-poetry@v1.4.1
    #     with:
    #       # version: 1.5.1
    #       # virtualenvs-create: true
    #       virtualenvs-in-project: true
    #       # virtualenvs-path: ~/poetry-venv
    #       # installer-parallel: true

    #   - name: Load cached venv
    #     id: cached-poetry-dependencies
    #     uses: actions/cache@v3
    #     with:
    #       path: .venv
    #       key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    #   - name: Install dependencies
    #     if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
    #     run: |
    #       python -m pip install --upgrade pip
    #       poetry install --sync --no-interaction

    #   - name: Build package
    #     run: poetry build

    #   - name: Publish package
    #     uses: pypa/gh-action-pypi-publish@v1.8.10
    #     with:
    #       packages-dir: ./dist
